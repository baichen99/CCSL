// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-02-09 19:06:40.65239 +0800 CST m=+0.464524434

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/lexical/videos": {
            "get": {
                "description": "get videos list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lexical Videos"
                ],
                "summary": "List videos for lexical database",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "select from page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "limit number",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order by field",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "order by asc or desc",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by lexicon ID",
                        "name": "lexiconID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter initial",
                        "name": "initial",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "search by Chinese",
                        "name": "chinese",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "search by English",
                        "name": "english",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by part of speech",
                        "name": "pos",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "filter by region ID",
                        "name": "regionID",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "M",
                            "F"
                        ],
                        "type": "string",
                        "description": "filter by gender",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by left handshape ID",
                        "name": "leftHandshapeID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by right handshape ID",
                        "name": "rightHandshapeID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by handshape ID",
                        "name": "handshapeID",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "search by morpheme",
                        "name": "morpheme",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "simple",
                            "compound"
                        ],
                        "type": "string",
                        "description": "filter by word formation",
                        "name": "wordFormation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "filter by performer ID",
                        "name": "performerID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetVideosListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "description": "get notifications list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "List notifications",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "select from page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "limit number",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order by field",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "order by asc or desc",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "search message of notification",
                        "name": "message",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetNotificationsListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/{id}": {
            "get": {
                "description": "Get a notification by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get notification",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "notification id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetNotificationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete a notification by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Delete notification",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "notification id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "get users list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "select from page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "limit number",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "order by field",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "order by asc or desc",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "super",
                            "admin",
                            "user",
                            "learner"
                        ],
                        "type": "string",
                        "description": "filter role of user",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "search name of user",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "search username of user",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "type": "string",
                        "description": "filter state of user",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.GetUsersListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "create user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/controllers.UserCreateForm"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controllers.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "put": {
                "description": "update a user by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "user id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "updated user",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/controllers.UserUpdateForm"
                        }
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "error message"
                },
                "message": {
                    "type": "string",
                    "example": "error title"
                }
            }
        },
        "controllers.GetNotificationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "$ref": "#/definitions/models.Notification"
                },
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "controllers.GetNotificationsListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Notification"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 100
                },
                "unread": {
                    "type": "integer"
                }
            }
        },
        "controllers.GetUsersListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "controllers.GetVideosListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.LexicalVideo"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "message": {
                    "type": "string",
                    "example": "success"
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "controllers.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "controllers.UserCreateForm": {
            "type": "object",
            "required": [
                "name",
                "roles",
                "state",
                "username"
            ],
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://ccsl.shu.edu.cn/public/assets/default.png"
                },
                "name": {
                    "type": "string",
                    "example": "Adrian Duan"
                },
                "password": {
                    "type": "string",
                    "example": "p@ssw0rd"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "super",
                            "admin",
                            "dbuser",
                            "student",
                            "teacher"
                        ]
                    },
                    "example": [
                        "admin"
                    ]
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "example": "active"
                },
                "username": {
                    "type": "string",
                    "example": "adrianduan@icloud.com"
                }
            }
        },
        "controllers.UserUpdateForm": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://ccsl.shu.edu.cn/public/assets/default.png"
                },
                "name": {
                    "type": "string",
                    "example": "Adrian Duan"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "super",
                            "admin",
                            "dbuser",
                            "student",
                            "teacher"
                        ]
                    },
                    "example": [
                        "admin"
                    ]
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "example": "active"
                },
                "username": {
                    "type": "string",
                    "example": "adrianduan@icloud.com"
                }
            }
        },
        "models.LexicalVideo": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2019-10-21T09:20:39.943618Z"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "leftHandshapesID": {
                    "description": "左手手形ID",
                    "type": "array",
                    "format": "uuid",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "550e8400-e29b-41d4-a716-446655440000"
                    ]
                },
                "lexiconID": {
                    "description": "词汇ID",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "morpheme": {
                    "description": "构词语素",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "hello",
                        "world"
                    ]
                },
                "performerID": {
                    "description": "被试ID",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "rightHandshapesID": {
                    "description": "右手手形ID",
                    "type": "array",
                    "format": "uuid",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "550e8400-e29b-41d4-a716-446655440000"
                    ]
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-10-21T09:20:39.943618Z"
                },
                "videoPath": {
                    "description": "视频路径",
                    "type": "string",
                    "example": "lexical_videos/550e8400-e29b-41d4-a716-446655440000.mp4"
                },
                "wordFormation": {
                    "description": "构词方式",
                    "type": "string",
                    "example": "simple"
                }
            }
        },
        "models.Notification": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "example": "2019-10-21T09:20:39.943618Z"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "message": {
                    "type": "string",
                    "example": "notification content"
                },
                "readAt": {
                    "type": "string",
                    "example": "2019-10-21T09:20:39.943618Z"
                },
                "title": {
                    "type": "string",
                    "example": "notification title"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-10-21T09:20:39.943618Z"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "avatar": {
                    "description": "头像",
                    "type": "string",
                    "example": "https://ccsl.shu.edu.cn/public/assets/default.png"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2019-10-21T09:20:39.943618Z"
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "name": {
                    "description": "姓名                                                                                     // 用户角色",
                    "type": "string",
                    "example": "Adrian"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "super",
                        "admin"
                    ]
                },
                "state": {
                    "description": "状态",
                    "type": "string",
                    "example": "active"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2019-10-21T09:20:39.943618Z"
                },
                "username": {
                    "description": "账号（一卡通或者邮箱）",
                    "type": "string",
                    "example": "adrianduan@icloud.com"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8888",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "CCSL API",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
